parameters:
  name: 'Build_Job'
  poolName: ''
  builConfig: ''
  artifactName: ''
  backendDir: 'back-end'
  

jobs:
  - job: ${{ parameters.name }}
    pool:
      name: ${{parameters.poolName}}
    variables:
      backendFolderPath: '${{parameters.backendDir}}'
      solutionName: 'QvaCar.sln'
      unitTestRegex: '/Tests/**/*.csproj'
      functionalTestsLocation: '$(backendFolderPath)/Tests/QvaCar.Api.FunctionalTests'
      functionalTestsComposeFolder: '$(backendFolderPath)'
      functionalTestsComposeProjectName: 'ci-backend'
    steps:

    - task: DockerCompose@0
      displayName: Functional Tests - Run dependant services
      inputs:
        action: Run services
        dockerComposeFile: '$(functionalTestsComposeFolder)/docker-compose.yaml'
        additionalDockerComposeFiles: 'docker-compose.ci.override.yaml'
        projectName: '$(functionalTestsComposeProjectName)'
        qualifyImageNames: true
        buildImages: true
        abortOnContainerExit: true
        detached: true

    - script: rename "appsettings.json" "appsettings1.json" && rename "appsettings.CI.json" "appsettings.json" && rename "appsettings1.json" "appsettings.CI.json"
      displayName: 'Functional Tests - Swap appsettings'
      workingDirectory: '$(functionalTestsLocation)'

    - task: DotNetCoreCLI@2
      displayName: '.Net Core - Restore (${{parameters.builConfig}})'
      inputs:
        command: 'restore'
        arguments: '--configuration ${{parameters.builConfig}}'
        projects: '$(backendFolderPath)/$(solutionName)'
    
    - task: DotNetCoreCLI@2
      displayName: '.Net Core - Build (${{parameters.builConfig}})'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration ${{parameters.builConfig}}'
        projects: '$(backendFolderPath)/$(solutionName)'

    - task: DotNetCoreCLI@2
      displayName: '.Net Core - Install tools from local manifest'
      inputs:
        command: custom
        custom: tool
        workingDirectory: '$(backendFolderPath)'
        arguments: 'restore'

    - script: docker run --rm --network="host" willwill/wait-for-it host.docker.internal:9256 -t 50 -s -- /wait-for-it.sh host.docker.internal:14356 -t 10 -s -- echo "All services are started"
      displayName: Functional Tests - Wait until dependant services are ready

    - task: DotNetCoreCLI@2
      displayName: '.Net Core - Run Tests (${{parameters.builConfig}})'
      inputs:
        command: 'test'
        arguments: '--no-build --configuration $(buildConfiguration) 
            /p:CollectCoverage=true 
            /p:CoverletOutputFormat=cobertura 
            /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
        publishTestResults: true
        projects: '$(backendFolderPath)/$(unitTestRegex)'
    
    - task: DotNetCoreCLI@2
      displayName: '.Net Core - Create Test Code Coverage Report'
      inputs:
        command: custom
        custom: tool
        workingDirectory: '$(backendFolderPath)'
        arguments: 'run reportgenerator 
                    -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml 
                    -targetdir:$(Build.SourcesDirectory)/CodeCoverage 
                    -reporttypes:HtmlInline_AzurePipelines'
    
    - task: PublishCodeCoverageResults@1
      displayName: '.Net Core  - Publish Code Coverage Report'
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

    - script: |
        dotnet ef migrations script --idempotent --no-build --project src\Infraestructure\QvaCar.Infraestructure.Identity  --startup-project src\QvaCar.Host --context QvaCarUsersDBContext --configuration ${{parameters.builConfig}}  --output $(Build.ArtifactStagingDirectory)/data/sql/users-db.sql -- --environment Production
        dotnet ef migrations script --idempotent --no-build --project src\Infraestructure\QvaCar.Infraestructure.Identity  --startup-project src\QvaCar.Host --context PersistedGrantDbContext --configuration ${{parameters.builConfig}}  --output $(Build.ArtifactStagingDirectory)/data/sql/grants-db.sql -- --environment Production
        dotnet ef migrations script --idempotent --no-build --project src\Infraestructure\QvaCar.Infraestructure.Identity  --startup-project src\QvaCar.Host --context ConfigurationDbContext --configuration ${{parameters.builConfig}}  --output $(Build.ArtifactStagingDirectory)/data/sql/identity-conf-db.sql -- --environment Production
        dotnet ef migrations script --idempotent --no-build --project src\Infraestructure\QvaCar.Infraestructure.Chat  --startup-project src\QvaCar.Host --context QvaCarChatDbContext --configuration ${{parameters.builConfig}}  --output $(Build.ArtifactStagingDirectory)/data/sql/chat-db.sql -- --environment Production
      displayName: 'Generate Migration Sql Scripts'
      workingDirectory: '$(backendFolderPath)'

    - task: DockerCompose@0
      displayName: Functional Tests - Stop functional tests services
      inputs:
        action: Run a Docker Compose command
        dockerComposeFile: '$(functionalTestsComposeFolder)/docker-compose.yaml'
        additionalDockerComposeFiles: 'docker-compose.ci.override.yaml'
        projectName: $(functionalTestsComposeProjectName)
        dockerComposeCommand: down --volumes

    - task: DotNetCoreCLI@2
      displayName: '.Net Core - Publish (${{parameters.builConfig}})'
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--no-build --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True

    - task: CopyFiles@2
      displayName: 'Copy Terraform Files To Artifact'
      inputs:
        sourceFolder: '$(backendFolderPath)/ci-cd/iac/terraform'
        contents: '**' 
        targetFolder:  '$(Build.ArtifactStagingDirectory)/terraform'   
    
    - publish: '$(Build.ArtifactStagingDirectory)'
      displayName: 'Publish Artifact - ${{parameters.artifactName}}'
      artifact: ${{parameters.artifactName}}