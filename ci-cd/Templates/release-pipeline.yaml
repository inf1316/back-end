parameters:
  name: 'Release Job'
  poolName: ''
  artifactName: ''
  deployRegion: ''
  sqlServerPassword: ''
  
  tfStateBlobAccountName: ''
  tfStateBlobContainerName: ''
  tfStateBlobFileName: ''
  tfStateBlobSasToken: ''

  armServicePrincipalSubscriptionId: ''
  armServicePrincipalClientId: ''
  armServicePrincipalClientSecret: ''
  armServicePrincipalTenantId: ''
  armAzureSubscriptionServiceConnectionName: ''


jobs:
  - deployment: 'release'
    displayName: '${{parameters.name}}'
    environment: 'Development'
    pool:
      name: ${{parameters.poolName}}
    variables:
      terraformFolderPath: '$(System.ArtifactsDirectory)/${{parameters.artifactName}}/terraform'
      sqlScriptsFolderPath: '$(System.ArtifactsDirectory)/${{parameters.artifactName}}/data/sql'     
    strategy:
        runOnce: 
            deploy:
                steps:
                - task: DownloadPipelineArtifact@2
                  displayName: 'Download Artifact - ${{parameters.artifactName}}'
                  inputs:
                    source: current
                    path: $(System.ArtifactsDirectory)/${{parameters.artifactName}}
                    artifact:  ${{parameters.artifactName}}

                - task: terraformInstaller@0
                  displayName: Install Terraform
                  inputs:
                      terraformVersion: 1.0.4
               
                - script: terraform init -backend-config="storage_account_name=%TF_STATE_BLOB_ACCOUNT_NAME%" -backend-config="container_name=%TF_STATE_BLOB_CONTAINER_NAME%" -backend-config="key=%TF_STATE_BLOB_FILE%" -backend-config="sas_token=%TF_STATE_BLOB_SAS_TOKEN%"
                  displayName: Terraform Init
                  workingDirectory: $(terraformFolderPath)
                  env:
                    TF_STATE_BLOB_ACCOUNT_NAME:   ${{parameters.tfStateBlobAccountName}}
                    TF_STATE_BLOB_CONTAINER_NAME: ${{parameters.tfStateBlobContainerName}}
                    TF_STATE_BLOB_FILE:           ${{parameters.tfStateBlobFileName}}
                    TF_STATE_BLOB_SAS_TOKEN:      ${{parameters.tfStateBlobSasToken}}

                - script: terraform validate                      
                  displayName: Terraform Validate
                  workingDirectory: $(terraformFolderPath)
                
                - script: terraform plan -var "sql_server_admin_password=${{parameters.sqlServerPassword}}" -var "default_location=${{parameters.deployRegion}}"
                  displayName: Terraform Plan
                  workingDirectory: $(terraformFolderPath)
                  env:
                    ARM_SUBSCRIPTION_ID: ${{parameters.armServicePrincipalSubscriptionId}}
                    ARM_CLIENT_ID:       ${{parameters.armServicePrincipalClientId}}
                    ARM_CLIENT_SECRET:   ${{parameters.armServicePrincipalClientSecret}}
                    ARM_TENANT_ID:       ${{parameters.armServicePrincipalTenantId}}

                - script: terraform apply -auto-approve -var "sql_server_admin_password=${{parameters.sqlServerPassword}}" -var "default_location=${{parameters.deployRegion}}"
                  displayName: Terraform Apply
                  workingDirectory: $(terraformFolderPath)
                  env:
                    ARM_SUBSCRIPTION_ID: ${{parameters.armServicePrincipalSubscriptionId}}
                    ARM_CLIENT_ID:       ${{parameters.armServicePrincipalClientId}}
                    ARM_CLIENT_SECRET:   ${{parameters.armServicePrincipalClientSecret}}
                    ARM_TENANT_ID:       ${{parameters.armServicePrincipalTenantId}}                    

                - script: terraform output -json > tf-output.json
                  displayName: Save Output as Json
                  workingDirectory: $(terraformFolderPath)
                
                - powershell: |
                    $terraformOutput = Get-Content "tf-output.json" | ConvertFrom-Json
                    $terraformOutput | Get-Member -MemberType NoteProperty | % { $o = $terraformOutput.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }
                  name: terraformOutput
                  displayName: Read Terraform Outputs
                  workingDirectory: $(terraformFolderPath)

                - task: SqlAzureDacpacDeployment@1
                  displayName: 'Apply Sql Migrations to Identity Database - Users'
                  inputs:
                    azureSubscription: ${{parameters.armAzureSubscriptionServiceConnectionName}}
                    AuthenticationType: connectionString
                    connectionString: $(terraformOutput.sql_server_qva_car_db_connection_string)
                    deployType: SqlTask
                    SqlFile: '$(sqlScriptsFolderPath)/users-db.sql'

                - task: SqlAzureDacpacDeployment@1
                  displayName: 'Apply Sql Migrations to Identity Database - Grants'
                  inputs:
                    azureSubscription: ${{parameters.armAzureSubscriptionServiceConnectionName}}
                    AuthenticationType: connectionString
                    connectionString: $(terraformOutput.sql_server_qva_car_db_connection_string)
                    deployType: SqlTask
                    SqlFile: '$(sqlScriptsFolderPath)/grants-db.sql'

                - task: SqlAzureDacpacDeployment@1
                  displayName: 'Apply Sql Migrations to Identity Database - Configuration'
                  inputs:
                    azureSubscription: ${{parameters.armAzureSubscriptionServiceConnectionName}}
                    AuthenticationType: connectionString
                    connectionString: $(terraformOutput.sql_server_qva_car_db_connection_string)
                    deployType: SqlTask
                    SqlFile: '$(sqlScriptsFolderPath)/identity-conf-db.sql'

                - task: SqlAzureDacpacDeployment@1
                  displayName: 'Apply Sql Migrations to Chat Database'
                  inputs:
                    azureSubscription: ${{parameters.armAzureSubscriptionServiceConnectionName}}
                    AuthenticationType: connectionString
                    connectionString: $(terraformOutput.sql_server_qva_car_db_connection_string)
                    deployType: SqlTask
                    SqlFile: '$(sqlScriptsFolderPath)/chat-db.sql'

                - script: |
                      echo ##vso[task.setvariable variable=ApplicationInsights.InstrumentationKey]$(terraformOutput.app_insights_instrumentation_key)
                      
                      echo ##vso[task.setvariable variable=CosmosDB.AccountEndpoint]$(terraformOutput.cosmosdb_endpoint)
                      echo ##vso[task.setvariable variable=CosmosDB.AccountKey]$(terraformOutput.cosmosdb_key)
                      echo ##vso[task.setvariable variable=CosmosDB.DatabaseName]$(terraformOutput.cosmosdb_db_name)

                      echo ##vso[task.setvariable variable=AzureBlogStorage.BlobStorageConnectionString]$(terraformOutput.storage_connection_string)
                      echo ##vso[task.setvariable variable=AzureBlogStorage.ContainerName]$(terraformOutput.storage_images_container_name)
                      echo ##vso[task.setvariable variable=AzureBlogStorage.BaseUrl]$(terraformOutput.storage_primary_blob_endpoint)
                      
                      echo ##vso[task.setvariable variable=Identity.Issuer]$(terraformOutput.web_app_hostname)
                      echo ##vso[task.setvariable variable=Identity.DatabaseConnectionString]$(terraformOutput.sql_server_qva_car_db_connection_string)
                      echo ##vso[task.setvariable variable=ChatDB.DatabaseConnectionString]$(terraformOutput.sql_server_qva_car_db_connection_string)

                      echo ##vso[task.setvariable variable=Smtp.Host]$(terraformOutput.container_smtp_host)

                      echo ##vso[task.setvariable variable=ElasticSearch.ServerEndpoint]$(terraformOutput.container_elastic_host):9200

                      echo ##vso[task.setvariable variable=Api.AuthHostUrl]$(terraformOutput.web_app_hostname)
                      
                  displayName: Map File Tranformation Variables

                - task: FileTransform@1
                  displayName: 'File Transformation: appsettings.json'
                  inputs:
                    folderPath: '$(Build.ArtifactStagingDirectory)/${{parameters.artifactName}}/QvaCar.Host.zip'
                    targetFiles: '**/appsettings.json'
                    fileType: json                

                - task: AzureWebApp@1
                  displayName: 'Azure Web App Deploy'
                  inputs:
                    azureSubscription: ${{parameters.armAzureSubscriptionServiceConnectionName}}
                    appType: webAppLinux
                    appName: $(terraformOutput.web_app_name)
                    package: $(System.ArtifactsDirectory)/${{parameters.artifactName}}/*.zip